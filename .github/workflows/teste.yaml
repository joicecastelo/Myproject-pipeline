name:  Teste de aplicacao

on:
  push:
    branches: [ main ]


    


jobs:

  unit_testing:
    name: Unitary Tests
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

         
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip

      - name: Install dependencies
        working-directory: api
        run: |
          pip install -r requirements.txt


      - name: Run Unitary Tests
        working-directory: api
        env:
          APP_ENV: test
        run: |
          pytest



  security_scan:
    name: Security Scan
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner in fs mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        trivy-config: trivy.yaml



  terraform_scripts:
    name: Scan Terraform Scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Test with Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/network
          framework: terraform 


  create_ecr_registry:
    name: Deploy ECR Registry in AWS
    runs-on: ubuntu-latest
    needs: [unit_testing, security_scan, terraform_scripts]
    steps:

    - name: Check out code
      uses: actions/checkout@v2


       # Install the preferred version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.4
        
    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      working-directory: terraform/Terraform
      run: terraform init

    - name: Terraform Validate
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      working-directory: terraform/Terraform
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_access_key_id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      

      working-directory: terraform/Terraform
      run: terraform plan -no-color -input=false
      continue-on-error: true
    
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      
    - name: Terraform Apply
      id: terraform_apply
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_access_key_id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      working-directory: terraform/Terraform 
      run: |
        terraform apply -auto-approve
        echo "::set-output name=aws_ecr_registry_id::$(terraform-bin output -raw aws_ecr_registry_id)"
        echo "::set-output name=aws_ecr_repository_url::$(terraform-bin output -raw aws_ecr_repository_url)"
    outputs:
      aws_ecr_registry_id: ${{ steps.terraform_apply.outputs.aws_ecr_registry_id }}
      aws_ecr_repository_url: ${{ steps.terraform_apply.outputs.aws_ecr_repository_url }}



  build:
    needs: create_ecr_registry
    
    name: Build Docker Image, Scan It (Security), and Push It to ECR
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, and tag Docker Image
      id: build_image
      env:
        ECR_REPOSITORY_URL: ${{needs.create_ecr_registry.outputs.aws_ecr_repository_url}}
        IMAGE_TAG: tmf632-party-mgmt-api
      run: |
        echo "$ECR_REPOSITORY_URL"
        echo "$ECR_REPOSITORY_URL:$IMAGE_TAG"
        docker build  -t $ECR_REPOSITORY_URL:$IMAGE_TAG -f docker/Dockerfile ./
        echo "Docker Image: ${ECR_REPOSITORY_URL}:${IMAGE_TAG}"
        echo "::set-output name=ecr_repository_url::$ECR_REPOSITORY_URL"
        echo "::set-output name=ecr_image_tag::$IMAGE_TAG"
        echo "::set-output name=ecr_image::$ECR_REPOSITORY_URL:$IMAGE_TAG"

    #- name: Run Trivy vulnerability scanner
    #  uses: aquasecurity/trivy-action@master
    #  with:
    #    image-ref: '${{ steps.build_image.outputs.ecr_image }}'
    #    format: 'sarif'
    #    output: 'trivy-results.sarif'
        
    - name: Push Ducker Image to AWS ECR
      id: push_image
      env:
        ECR_REPOSITORY_URL: ${{needs.create_ecr_registry.outputs.aws_ecr_repository_url}}
        IMAGE_TAG: tmf632-party-mgmt-api
      run: |
        echo "$ECR_REPOSITORY_URL"
        echo "$ECR_REPOSITORY_URL:$IMAGE_TAG"
        docker build  -t $ECR_REPOSITORY_URL:$IMAGE_TAG -f docker/Dockerfile ./
        docker push $ECR_REPOSITORY_URL:$IMAGE_TAG
    outputs:
      ecr_image_tag: ${{ steps.build_image.outputs.ecr_image_tag }}



  deploy_testing_environment:
    name: Deploy Solution's Testing Environment
    runs-on: ubuntu-latest
    needs: [build, create_ecr_registry] 
    steps:

    - name: Check out code
      uses: actions/checkout@v2

    # Install the preferred version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.4
            
    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      working-directory: terraform/Arquitetura
      run: terraform init

    - name: Terraform Validate
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      working-directory: terraform/Arquitetura
      run: terraform validate -no-color

    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_access_key_id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # Docker Image to deploy through an ECS Task 
        TF_VAR_docker_image_name: ${{ needs.create_ecr_registry.outputs.aws_ecr_repository_url }}:${{ needs.build.outputs.ecr_image_tag }}
      id: plan
      working-directory: terraform/Arquitetura
      run: |
        echo "Docker Image Name: $TF_VAR_docker_image_name"
        terraform plan -no-color -input=false
      continue-on-error: true
    
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      id: terraform_apply_testing_environment
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_access_key_id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # Docker Image to deploy through an ECS Task 
        TF_VAR_docker_image_name: ${{ needs.create_ecr_registry.outputs.aws_ecr_repository_url }}:${{ needs.build.outputs.ecr_image_tag }}
      working-directory: terraform/Arquitetura
      run: |
        echo "Docker Image Name: $TF_VAR_docker_image_name"
        terraform apply -auto-approve
        echo "::set-output name=api_url::$(terraform-bin output -raw alb_address)"
    outputs:
      api_url: ${{ steps.terraform_apply_testing_environment.outputs.api_url }}

     #Create Robot
  e2e_testing:
    needs: deploy_testing_environment
    name: "End To End Testing"
    runs-on: ubuntu-latest
    steps:

      - name: Check out repository code
        uses: actions/checkout@v2

      # Setup Python (faster than using Python container)
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip

      - name: Install dependencies
        working-directory: robot_tests
        run: |
          pip install -r requirements.txt

      - name: Wait for API to be Running
        env:
          WAIT_FOR_ENDPOINT_URL: ${{ needs.deploy_testing_environment.outputs.api_url }}/healthcheck/
        working-directory: robot_tests
        run: |
          echo "HEALTHCHECK_ENDPOINT: $URL"
          python waitForAPI.py

      - name: Run E2E Tests
        env:
          API_BASE_URL: ${{ needs.deploy_testing_environment.outputs.api_url }}
        working-directory: robot_tests
        run: |
          python -m robot .
      


