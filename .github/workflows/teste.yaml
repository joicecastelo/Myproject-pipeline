name:  Teste de aplicacao

on:
  push:
    branches: [ main ]


    


jobs:

  unit_testing:
    name: Unitary Tests
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

         
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip

      - name: Install dependencies
        working-directory: api
        run: |
          pip install -r requirements.txt


      - name: Run Unitary Tests
        working-directory: api
        env:
          APP_ENV: test
        run: |
          pytest



  security_pipe:
    name: Security pipe
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner in fs mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        trivy-config: trivy.yaml



  terraform_scripts:
    name: pipe Terraform Scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Test with Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/main
          framework: terraform 


  create_ecr_registry:
    name: Deploy ECR Registry in AWS
    runs-on: ubuntu-latest
    needs: [unit_testing, security_pipe, terraform_scripts]
    steps:

    - name: Check out code
      uses: actions/checkout@v2


       # Install the preferred version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.4
        
    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      working-directory: terraform/main
      run: terraform init

    - name: Terraform Validate
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      working-directory: terraform/main
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_access_key_id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      working-directory: terraform/main
      run: terraform plan -no-color -input=false
      continue-on-error: true
    
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      
    - name: Terraform Apply
      id: terraform_apply
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_access_key_id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      working-directory: terraform/main
      run: |
        terraform apply -auto-approve
        echo "::set-output name=aws_ecr_registry_id::$(terraform-bin output -raw aws_ecr_registry_id)"
        echo "::set-output name=aws_ecr_repository_url::$(terraform-bin output -raw aws_ecr_repository_url)"
    outputs:
      aws_ecr_registry_id: ${{ steps.terraform_apply.outputs.aws_ecr_registry_id }}
      aws_ecr_repository_url: ${{ steps.terraform_apply.outputs.aws_ecr_repository_url }}
